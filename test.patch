diff --git a/Dockerfile b/Dockerfile
index c61fe40..4ad86e1 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -32,17 +32,18 @@ RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
 
 
 COPY config-sshhost.py /challenge/
-COPY temp_file_madness.py /challenge/
+COPY joey_file_system.py /challenge/
 COPY --from=builder /challenge/flag.txt /challenge/
 RUN chown -R root:root /challenge/
 RUN chmod -R 700 /challenge/
 # RUN chown root:root /challenge/flag.txt
 # RUN chmod 700 /challenge/flag.txt
-RUN pip3 install bcrypt
+RUN pip3 install python-magic
 
 COPY start.sh /opt/
 COPY profile /home/ctf-player/.profile
 RUN  mkdir /home/ctf-player/tmp
+RUN  mkdir /home/ctf-player/downloads
 
 FROM ssh_host_base AS ssh_host
 COPY --from=builder /challenge/password.txt /tmp/
diff --git a/problem.md b/problem.md
index 52fa15d..1e9f93a 100644
--- a/problem.md
+++ b/problem.md
@@ -1,7 +1,7 @@
 # General SSH
 
 - Namespace: 18739
-- ID: jwildman-problem-dev-1
+- ID: jwildman-problem-dev-2
 - Type: custom
 - Category: System fundamentals
 - Points: 1
diff --git a/start.sh b/start.sh
index 6d1b834..8a9db4d 100755
--- a/start.sh
+++ b/start.sh
@@ -4,5 +4,5 @@ set -e
 
 service ssh start
 
-socat tcp-listen:5556,reuseaddr,fork SYSTEM:"python3 /challenge/temp_file_madness.py" &
+socat tcp-listen:5556,reuseaddr,fork SYSTEM:"python3 /challenge/joey_file_system.py" &
 socat tcp-listen:5555,reuseaddr,fork tcp:localhost:22
diff --git a/temp_file_madness.py b/temp_file_madness.py
deleted file mode 100644
index 1d27d36..0000000
--- a/temp_file_madness.py
+++ /dev/null
@@ -1,93 +0,0 @@
-import random
-import string
-import os
-import sys
-import datetime
-import traceback
-import bcrypt
-
-
-print(os.path.realpath(__file__))
-
-TMP_MAX = random.randint(10, 20)
-_candidate_names = [''.join(random.choices(string.ascii_uppercase + string.digits, k=TMP_MAX)) for i in range(TMP_MAX)]
-
-rolling_counter = 0
-
-def _get_candidate_names():
-    return _candidate_names
-
-# ensure we aren't writing to an existing file
-def _exists(fn):
-    try:
-        os.lstat(fn)
-    except OSError:
-        return False
-    else:
-        return True
-
-# get ourselves a temporary file to write to
-def temp_mktemp(prefix="", suffix=""):
-    global rolling_counter
-    dir = "/home/ctf-player/tmp/"
-
-    names = _get_candidate_names()
-    
-    for i in range(TMP_MAX):
-        i_circular = (rolling_counter + i) % TMP_MAX
-        name = names[i_circular]
-        file = os.path.join(dir, prefix + name + suffix)
-        if not _exists(file):
-            rolling_counter = rolling_counter + 1
-            return file
-        
-    raise Exception("No usable temporary filename found")
-
-# so our other admins can get the flag, they can slow down time so
-# no issue if the file exists for only a moment
-def write_flag_secure():
-    temp_flag_file = temp_mktemp()
-    flag = open("/challenge/flag.txt").read()
-    now = datetime.datetime.now()
-    append = " - DO NOT DISTRIBUTE - "
-    append += f" - FROM: FLAG SERVER at time - {now}"
-    # next level integrity hash!!!
-    salt = bcrypt.gensalt()
-    result = bcrypt.hashpw(
-       password=append.encode('utf-8'),
-       salt=salt
-    )
-    append += result.decode('utf-8')
-    f = open(temp_flag_file, 'w+')
-    f.write(flag)
-    f.write(append)
-    f.close()
-    # admin has saved it with premonition, we can delete
-    os.remove(temp_flag_file)
-    print("wrote flag securely to: ", temp_flag_file)
-
-def exit():
-  sys.exit(0)
-
-print("Welcome to the secure flag service! Only admins should use this service. Not like you could get the flag though, you operate too slowly to catch our flags.")
-
-while(True):
-  try:
-    inp = input("put in command: ")
-    if (inp == "temp"):
-        write_flag_secure()
-    elif(inp == "flag"):
-       flag = open("/challenge/flag.txt").read()
-       salt = bcrypt.gensalt()
-       result = bcrypt.hashpw(
-            password=flag.encode('utf-8'),
-            salt=salt
-       )
-       print(flag)
-       print("have fun with this!!!")
-    elif (inp == "exit"):
-       exit()
-  except Exception as e:
-    print("ERROR", e)
-    print(traceback.format_exc())
-    break
\ No newline at end of file
